{
    "docs": [
        {
            "location": "/", 
            "text": "IPtables\n\n\nControl iptables for pre routing rules (port forwarding). Specifically suited for forwarding ports to internal LXC containers.\n\n\nInstall\n\n\nRequire this package with composer using the following command:\n\n\n$ composer require plinker/iptables\n\n\n\n\n\nThen navigate to \n./vendor/plinker/iptables/scripts\n and run \nbash install.sh\n.\n\n\nClient\n\n\nCreating a client instance is done as follows:\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker client.\n\n\n *\n\n\n * @param string $server - URL to server listener.\n\n\n * @param string $config - server secret, and/or a additional component data\n\n\n */\n\n\n$client\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n    \nhttp://example.com/server.php\n,\n\n    \n[\n\n        \nsecret\n \n=\n \na secret password\n,\n\n        \n// database connection\n\n        \ndatabase\n \n=\n \n[\n\n            \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n            \nhost\n     \n=\n \n,\n\n            \nname\n     \n=\n \n,\n\n            \nusername\n \n=\n \n,\n\n            \npassword\n \n=\n \n,\n\n            \nfreeze\n   \n=\n \nfalse\n,\n\n            \ndebug\n    \n=\n \nfalse\n,\n\n        \n]\n\n    \n]\n\n\n);\n\n\n\n// or using global function\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n,\n \n[\n\n    \n// database connection\n\n    \ndatabase\n \n=\n \n[\n\n        \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n        \nhost\n     \n=\n \n,\n\n        \nname\n     \n=\n \n,\n\n        \nusername\n \n=\n \n,\n\n        \npassword\n \n=\n \n,\n\n        \nfreeze\n   \n=\n \nfalse\n,\n\n        \ndebug\n    \n=\n \nfalse\n,\n\n    \n]\n\n\n]);\n\n\n\n\n\n\nMethods\n\n\nOnce setup, you call the class though its namespace to its method.\n\n\nSetup\n\n\nApplies build tasks to plinker/tasks queue.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\noptions\n\n\narray\n\n\nBuild options\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\niptables-\nsetup([\n    \nbuild_sleep\n =\n 5,\n    \nreconcile_sleep\n =\n 5,\n]);\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nUpdate Package\n\n\nRuns composer update to update package.\n\n\nCall\n\n\n$client-\niptables-\nupdate_package();\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nFetch\n\n\nFetch currently configured forward or blocked rules from database.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\n\n\nCall\n\n\nall           - $client-\niptables-\nfetch();\nruleById(1)   - $client-\niptables-\nfetch(\nid = ?\n, [1]);\nruleByName(1) - $client-\niptables-\nfetch(\nname = ?\n, [\nguidV4-value\n])\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [0] =\n Array\n        (\n            [id] =\n 1\n            [type] =\n forward\n            [name] =\n 5b1b63cd-0106-4fde-ba3f-8b252ae400a1\n            [label] =\n Example\n            [ip] =\n 10.100.200.2\n            [port] =\n 2251\n            [srv_type] =\n SSH\n            [srv_port] =\n 22\n            [enabled] =\n 1\n            [added_date] =\n 2018-01-25 02:18:26\n            [has_change] =\n 0\n            [updated_date] =\n 2018-01-25 02:18:26\n            [range] =\n \n            [note] =\n \n            [bantime] =\n \n        )\n\n)\n\n\n\n\n\nCount\n\n\nFetch count of currently configured forward or blocked rules from database.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\n\n\nCall\n\n\nall           - $client-\niptables-\ncount();\nruleById(1)   - $client-\niptables-\ncount(\nid = ?\n, [1]);\nruleByName(1) - $client-\niptables-\ncount(\nname = ?\n, [\nguidV4-value\n])\n\n\n\n\n\nResponse\n\n\n1\n\n\n\n\n\nRebuild\n\n\nRebuild forward or blocked rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\n\n\nCall\n\n\nruleById(1)   - $client-\niptables-\nrebuild(\nid = ?\n, [1]);\nruleByName(1) - $client-\niptables-\nrebuild(\nname = ?\n, [\nguidV4-value\n])\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n)\n\n\n\n\n\nRemove\n\n\nRemove forward or blocked rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\n\n\nCall\n\n\nruleById(1)   - $client-\niptables-\nremove(\nid = ?\n, [1]);\nruleByName(1) - $client-\niptables-\nremove(\nname = ?\n, [\nguidV4-value\n])\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n)\n\n\n\n\n\nReset\n\n\nRemove all forwards and blocked rules.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npurge\n\n\nbool\n\n\nAlso remove tasks\n\n\nfalse\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\niptables-\nreset();     // remove just rules\n$client-\niptables-\nreset(true); // remove rules and tasks (purge)\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n)\n\n\n\n\n\nAdd Block\n\n\nAdd an IP address to blocked rules.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndata\n\n\narray\n\n\nRule data\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\niptables-\naddBlock([\n    \nip\n      =\n \n123.123.123.123\n,\n    \nrange\n   =\n 32,\n    \nnote\n    =\n \nPort scanned server\n,\n    \nenabled\n =\n 1\n]);\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n    [values] =\n Array\n        (\n            [id] =\n 3\n            [type] =\n block\n            [name] =\n 7bb82b0c-617d-4343-bca5-f8055a7e3087\n            [label] =\n -\n            [ip] =\n 123.123.123.123\n            [range] =\n 32\n            [note] =\n Port scanned server\n            [added_date] =\n 2018-05-09 22:46:30\n            [bantime] =\n 0\n            [enabled] =\n 1\n            [has_change] =\n 1\n        )\n\n)\n\n\n\n\n\nUpdate Block\n\n\nUpdate a blocked IP address rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\ndata\n\n\narray\n\n\nUpdated rule data\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\niptables-\nupdateBlock(\nid = ?\n, [3], [\n    \nlabel\n =\n \n,\n    \nenabled\n =\n 1,\n    \nip\n =\n \n212.123.123.123\n,\n    \nrange\n =\n 32,\n    \nnote\n =\n \nFooBar\n,\n    \nbantime\n =\n 0\n]);\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n    [values] =\n Array\n        (\n            [id] =\n 3\n            [type] =\n block\n            [name] =\n 7bb82b0c-617d-4343-bca5-f8055a7e3087\n            [label] =\n \n            [ip] =\n 212.123.123.123\n            [port] =\n \n            [srv_type] =\n \n            [srv_port] =\n \n            [enabled] =\n 1\n            [added_date] =\n 2018-05-09 22:46:30\n            [has_change] =\n 1\n            [updated_date] =\n 2018-05-09 22:54:15\n            [range] =\n 32\n            [note] =\n FooBar\n            [bantime] =\n 0\n        )\n\n)\n\n\n\n\n\nStatus\n\n\nEnumarate and return status of used and available ports.\n\n\nCall\n\n\n$client-\niptables-\nstatus();\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [blocked_rules] =\n 1\n    [forward_rules] =\n 0\n    [total] =\n 400\n    [available] =\n 400\n)\n\n\n\n\n\nRaw\n\n\nFetch raw iptables, equivalent to \niptables-save\n.\n\n\nCall\n\n\n$client-\niptables-\nraw();\n\n\n\n\n\nResponse\n\n\n# Generated on Thu Jan 25 12:34:56 2018\n*mangle\n:PREROUTING ACCEPT [0:0]\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:POSTROUTING ACCEPT [0:0]\n-A POSTROUTING -o lxcbr0 -p udp -m udp --dport 68 -j CHECKSUM --checksum-fill\nCOMMIT\n*nat\n:PREROUTING ACCEPT [0:0]\n:INPUT ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:POSTROUTING ACCEPT [0:0]\n:DOCKER - [0:0]\n-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER\n-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE\n-A PREROUTING -p tcp -m tcp --dport 2251 -j DNAT --to-destination 10.158.250.6:22\n-A PREROUTING -p udp -m udp --dport 2251 -j DNAT --to-destination 10.158.250.6:22\n-A POSTROUTING -s 10.158.250.0/8 ! -d 10.158.250.0/8 -j MASQUERADE\n-A DOCKER -i lxcbr0 -j RETURN\nCOMMIT\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:fail2ban-ssh - [0:0]\n:DOCKER - [0:0]\n:DOCKER-ISOLATION - [0:0]\n:DOCKER-USER - [0:0]\n-A INPUT -p tcp -m multiport --dports 2020 -j fail2ban-ssh\n-A INPUT -p tcp -m multiport --dports 22 -j fail2ban-ssh\n-A INPUT -p tcp -m multiport --dports 2200:2299 -j fail2ban-ssh\n-A INPUT -i lxcbr0 -p tcp -m tcp --dport 53 -j ACCEPT\n-A INPUT -i lxcbr0 -p udp -m udp --dport 53 -j ACCEPT\n-A INPUT -i lxcbr0 -p tcp -m tcp --dport 67 -j ACCEPT\n-A INPUT -i lxcbr0 -p udp -m udp --dport 67 -j ACCEPT\n-A INPUT -i lo -j ACCEPT\n-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -m conntrack --ctstate INVALID -j DROP\n-A INPUT -p tcp -m tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT\n-A INPUT -p tcp -m tcp --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT\n-A INPUT -p tcp -m tcp --dport 8443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT\n-A FORWARD -j DOCKER-USER\n-A FORWARD -j DOCKER-ISOLATION\n-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A FORWARD -o docker0 -j DOCKER\n-A FORWARD -i docker0 ! -o docker0 -j ACCEPT\n-A FORWARD -i docker0 -o docker0 -j ACCEPT\n-A FORWARD -o lxcbr0 -j ACCEPT\n-A FORWARD -i lxcbr0 -j ACCEPT\n-A OUTPUT -o lo -j ACCEPT\n-A OUTPUT -p tcp -m tcp --sport 80 -m conntrack --ctstate ESTABLISHED -j ACCEPT\n-A OUTPUT -p tcp -m tcp --sport 443 -m conntrack --ctstate ESTABLISHED -j ACCEPT\n-A OUTPUT -p tcp -m tcp --sport 8443 -m conntrack --ctstate ESTABLISHED -j ACCEPT\n-A OUTPUT -o lxcbr0 -p tcp -m tcp --sport 53 -j ACCEPT\n-A OUTPUT -o lxcbr0 -p udp -m udp --sport 53 -j ACCEPT\n-A OUTPUT -o lxcbr0 -p udp -m udp --sport 67 -j ACCEPT\n-A DOCKER-ISOLATION -j RETURN\n-A DOCKER-USER -j RETURN\n-A INPUT -s 212.123.123.123/32 -j REJECT\n-A fail2ban-ssh -j RETURN\nCOMMIT\n# Completed on Thu Jan 25 12:34:56 2018\n\n\n\n\n\nAvailable Ports\n\n\nFetch available ports within a range type.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nstring\n\n\nPort range type\n\n\nall\n\n\n\n\n\n\n\n\nThe following port ranges (400 ports) are externally available for forwarding.\n\n\n\n\n\n\n\n\nType\n\n\nRange\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nall\n\n\n2200 - 8099\n\n\nReturns all available ports\n\n\n\n\n\n\nssh\n\n\n2200 - 2299\n\n\nReturns available ssh ports\n\n\n\n\n\n\nhttp\n\n\n8000 - 8099\n\n\nReturns available http ports\n\n\n\n\n\n\nmysql\n\n\n3300 - 3399\n\n\nReturns available mysql ports\n\n\n\n\n\n\nshellinabox\n\n\n4200 - 4299\n\n\nReturns available shellinabox ports\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\niptables-\navailablePorts(\nhttp\n);\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [0] =\n 8000\n    [1] =\n 8001\n    [2] =\n 8002\n    [3] =\n 8003\n    [4] =\n 8004\n    [5] =\n 8005\n    [6] =\n 8006\n    [7] =\n 8007\n    [8] =\n 8008\n    [9] =\n 8009\n    [10] =\n 8010\n    ... snip\n    [99] =\n 8099\n)\n\n\n\n\n\nCheck Port In Use\n\n\nCheck if a port is already in use by a rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nport\n\n\nint\n\n\nPort to check\n\n\n0\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\niptables-\ncheckPortInUse(8000);\n\n\n\n\n\nResponse\n\n\nboolean\n\n\n\n\n\nCheck Allowed Port\n\n\nCheck if a port is in allowed ranges.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nport\n\n\nint\n\n\nPort to check\n\n\n0\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\niptables-\ncheckAllowedPort(12345);\n\n\n\n\n\nResponse\n\n\nboolean - false in the above case\n\n\n\n\n\nAdd Forward\n\n\nAdd new port forward rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndata\n\n\narray\n\n\nRule data\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\niptables-\naddForward([\n    \nlabel\n =\n \nExample\n,\n    \nip\n =\n \n10.158.250.5\n,\n    \nport\n =\n 2252,\n    \nsrv_type\n =\n \nSSH\n,\n    \nsrv_port\n =\n 22,\n    \nenabled\n =\n 1\n]);\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n    [values] =\n Array\n        (\n            [id] =\n 5\n            [type] =\n forward\n            [name] =\n d82025df-fc3f-4a2e-bbbd-dde6fddab4cb\n            [label] =\n Example\n            [ip] =\n 10.158.250.5\n            [port] =\n 2252\n            [srv_type] =\n ssh\n            [srv_port] =\n 22\n            [enabled] =\n 1\n            [added_date] =\n 2018-05-10 01:01:46\n            [has_change] =\n 1\n        )\n\n)\n\n\n\n\n\nUpdate Forward\n\n\nUpdate port forward rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\ndata\n\n\narray\n\n\nUpdated rule data\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\niptables-\nupdateForward(\nid = ?\n, [4], [\n    \nname\n =\n \n8610e47a-cf06-4806-964b-c5a3642954bb\n, // always use, to bypass port in use check\n    \nlabel\n =\n \nExample\n,\n    \nip\n =\n \n10.158.250.5\n,\n    \nport\n =\n 2252,\n    \nsrv_type\n =\n \nSSH\n,\n    \nsrv_port\n =\n 22,\n    \nenabled\n =\n 1\n]);\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n    [values] =\n Array\n        (\n            [id] =\n 4\n            [type] =\n forward\n            [name] =\n 8610e47a-cf06-4806-964b-c5a3642954bb\n            [label] =\n Example\n            [ip] =\n 10.158.250.5\n            [port] =\n 2252\n            [srv_type] =\n SSH\n            [srv_port] =\n 22\n            [enabled] =\n 1\n            [added_date] =\n 2018-05-10 01:01:25\n            [has_change] =\n 1\n            [updated_date] =\n 2018-05-10 01:16:46\n            [range] =\n \n            [note] =\n \n            [bantime] =\n \n        )\n\n)\n\n\n\n\n\nTesting\n\n\nThere are no tests setup for this component.\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.\n\n\nSecurity\n\n\nIf you discover any security related issues, please contact me via \nhttps://cherone.co.uk\n instead of using the issue tracker.\n\n\nCredits\n\n\n\n\nLawrence Cherone\n\n\nAll Contributors\n\n\n\n\nDevelopment Encouragement\n\n\nIf you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed throughout the documentation and on each github repository, contact me at \nhttps://cherone.co.uk\n for further details.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.\n\n\nSee the \norganisations page\n for additional components.", 
            "title": "IPtables"
        }, 
        {
            "location": "/#iptables", 
            "text": "Control iptables for pre routing rules (port forwarding). Specifically suited for forwarding ports to internal LXC containers.", 
            "title": "IPtables"
        }, 
        {
            "location": "/#install", 
            "text": "Require this package with composer using the following command:  $ composer require plinker/iptables  Then navigate to  ./vendor/plinker/iptables/scripts  and run  bash install.sh .", 
            "title": "Install"
        }, 
        {
            "location": "/#client", 
            "text": "Creating a client instance is done as follows:  ?php  require   vendor/autoload.php ;  /**   * Initialize plinker client.   *   * @param string $server - URL to server listener.   * @param string $config - server secret, and/or a additional component data   */  $client   =   new   \\Plinker\\Core\\Client ( \n     http://example.com/server.php , \n     [ \n         secret   =   a secret password , \n         // database connection \n         database   =   [ \n             dsn        =   sqlite:./.plinker/database.db , \n             host       =   , \n             name       =   , \n             username   =   , \n             password   =   , \n             freeze     =   false , \n             debug      =   false , \n         ] \n     ]  );  // or using global function  $client   =   plinker_client ( http://example.com/server.php ,   a secret password ,   [ \n     // database connection \n     database   =   [ \n         dsn        =   sqlite:./.plinker/database.db , \n         host       =   , \n         name       =   , \n         username   =   , \n         password   =   , \n         freeze     =   false , \n         debug      =   false , \n     ]  ]);", 
            "title": "Client"
        }, 
        {
            "location": "/#methods", 
            "text": "Once setup, you call the class though its namespace to its method.", 
            "title": "Methods"
        }, 
        {
            "location": "/#setup", 
            "text": "Applies build tasks to plinker/tasks queue.     Parameter  Type  Description  Default      options  array  Build options      Call  $client- iptables- setup([\n     build_sleep  =  5,\n     reconcile_sleep  =  5,\n]);  Response", 
            "title": "Setup"
        }, 
        {
            "location": "/#update-package", 
            "text": "Runs composer update to update package.  Call  $client- iptables- update_package();  Response", 
            "title": "Update Package"
        }, 
        {
            "location": "/#fetch", 
            "text": "Fetch currently configured forward or blocked rules from database.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values      Call  all           - $client- iptables- fetch();\nruleById(1)   - $client- iptables- fetch( id = ? , [1]);\nruleByName(1) - $client- iptables- fetch( name = ? , [ guidV4-value ])  Response  Array\n(\n    [0] =  Array\n        (\n            [id] =  1\n            [type] =  forward\n            [name] =  5b1b63cd-0106-4fde-ba3f-8b252ae400a1\n            [label] =  Example\n            [ip] =  10.100.200.2\n            [port] =  2251\n            [srv_type] =  SSH\n            [srv_port] =  22\n            [enabled] =  1\n            [added_date] =  2018-01-25 02:18:26\n            [has_change] =  0\n            [updated_date] =  2018-01-25 02:18:26\n            [range] =  \n            [note] =  \n            [bantime] =  \n        )\n\n)", 
            "title": "Fetch"
        }, 
        {
            "location": "/#count", 
            "text": "Fetch count of currently configured forward or blocked rules from database.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values      Call  all           - $client- iptables- count();\nruleById(1)   - $client- iptables- count( id = ? , [1]);\nruleByName(1) - $client- iptables- count( name = ? , [ guidV4-value ])  Response  1", 
            "title": "Count"
        }, 
        {
            "location": "/#rebuild", 
            "text": "Rebuild forward or blocked rule.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values      Call  ruleById(1)   - $client- iptables- rebuild( id = ? , [1]);\nruleByName(1) - $client- iptables- rebuild( name = ? , [ guidV4-value ])  Response  Array\n(\n    [status] =  success\n)", 
            "title": "Rebuild"
        }, 
        {
            "location": "/#remove", 
            "text": "Remove forward or blocked rule.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values      Call  ruleById(1)   - $client- iptables- remove( id = ? , [1]);\nruleByName(1) - $client- iptables- remove( name = ? , [ guidV4-value ])  Response  Array\n(\n    [status] =  success\n)", 
            "title": "Remove"
        }, 
        {
            "location": "/#reset", 
            "text": "Remove all forwards and blocked rules.     Parameter  Type  Description  Default      purge  bool  Also remove tasks  false     Call  $client- iptables- reset();     // remove just rules\n$client- iptables- reset(true); // remove rules and tasks (purge)  Response  Array\n(\n    [status] =  success\n)", 
            "title": "Reset"
        }, 
        {
            "location": "/#add-block", 
            "text": "Add an IP address to blocked rules.     Parameter  Type  Description  Default      data  array  Rule data      Call  $client- iptables- addBlock([\n     ip       =   123.123.123.123 ,\n     range    =  32,\n     note     =   Port scanned server ,\n     enabled  =  1\n]);  Response  Array\n(\n    [status] =  success\n    [values] =  Array\n        (\n            [id] =  3\n            [type] =  block\n            [name] =  7bb82b0c-617d-4343-bca5-f8055a7e3087\n            [label] =  -\n            [ip] =  123.123.123.123\n            [range] =  32\n            [note] =  Port scanned server\n            [added_date] =  2018-05-09 22:46:30\n            [bantime] =  0\n            [enabled] =  1\n            [has_change] =  1\n        )\n\n)", 
            "title": "Add Block"
        }, 
        {
            "location": "/#update-block", 
            "text": "Update a blocked IP address rule.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values     data  array  Updated rule data      Call  $client- iptables- updateBlock( id = ? , [3], [\n     label  =   ,\n     enabled  =  1,\n     ip  =   212.123.123.123 ,\n     range  =  32,\n     note  =   FooBar ,\n     bantime  =  0\n]);  Response  Array\n(\n    [status] =  success\n    [values] =  Array\n        (\n            [id] =  3\n            [type] =  block\n            [name] =  7bb82b0c-617d-4343-bca5-f8055a7e3087\n            [label] =  \n            [ip] =  212.123.123.123\n            [port] =  \n            [srv_type] =  \n            [srv_port] =  \n            [enabled] =  1\n            [added_date] =  2018-05-09 22:46:30\n            [has_change] =  1\n            [updated_date] =  2018-05-09 22:54:15\n            [range] =  32\n            [note] =  FooBar\n            [bantime] =  0\n        )\n\n)", 
            "title": "Update Block"
        }, 
        {
            "location": "/#status", 
            "text": "Enumarate and return status of used and available ports.  Call  $client- iptables- status();  Response  Array\n(\n    [blocked_rules] =  1\n    [forward_rules] =  0\n    [total] =  400\n    [available] =  400\n)", 
            "title": "Status"
        }, 
        {
            "location": "/#raw", 
            "text": "Fetch raw iptables, equivalent to  iptables-save .  Call  $client- iptables- raw();  Response  # Generated on Thu Jan 25 12:34:56 2018\n*mangle\n:PREROUTING ACCEPT [0:0]\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:POSTROUTING ACCEPT [0:0]\n-A POSTROUTING -o lxcbr0 -p udp -m udp --dport 68 -j CHECKSUM --checksum-fill\nCOMMIT\n*nat\n:PREROUTING ACCEPT [0:0]\n:INPUT ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:POSTROUTING ACCEPT [0:0]\n:DOCKER - [0:0]\n-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER\n-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE\n-A PREROUTING -p tcp -m tcp --dport 2251 -j DNAT --to-destination 10.158.250.6:22\n-A PREROUTING -p udp -m udp --dport 2251 -j DNAT --to-destination 10.158.250.6:22\n-A POSTROUTING -s 10.158.250.0/8 ! -d 10.158.250.0/8 -j MASQUERADE\n-A DOCKER -i lxcbr0 -j RETURN\nCOMMIT\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:fail2ban-ssh - [0:0]\n:DOCKER - [0:0]\n:DOCKER-ISOLATION - [0:0]\n:DOCKER-USER - [0:0]\n-A INPUT -p tcp -m multiport --dports 2020 -j fail2ban-ssh\n-A INPUT -p tcp -m multiport --dports 22 -j fail2ban-ssh\n-A INPUT -p tcp -m multiport --dports 2200:2299 -j fail2ban-ssh\n-A INPUT -i lxcbr0 -p tcp -m tcp --dport 53 -j ACCEPT\n-A INPUT -i lxcbr0 -p udp -m udp --dport 53 -j ACCEPT\n-A INPUT -i lxcbr0 -p tcp -m tcp --dport 67 -j ACCEPT\n-A INPUT -i lxcbr0 -p udp -m udp --dport 67 -j ACCEPT\n-A INPUT -i lo -j ACCEPT\n-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -m conntrack --ctstate INVALID -j DROP\n-A INPUT -p tcp -m tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT\n-A INPUT -p tcp -m tcp --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT\n-A INPUT -p tcp -m tcp --dport 8443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT\n-A FORWARD -j DOCKER-USER\n-A FORWARD -j DOCKER-ISOLATION\n-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A FORWARD -o docker0 -j DOCKER\n-A FORWARD -i docker0 ! -o docker0 -j ACCEPT\n-A FORWARD -i docker0 -o docker0 -j ACCEPT\n-A FORWARD -o lxcbr0 -j ACCEPT\n-A FORWARD -i lxcbr0 -j ACCEPT\n-A OUTPUT -o lo -j ACCEPT\n-A OUTPUT -p tcp -m tcp --sport 80 -m conntrack --ctstate ESTABLISHED -j ACCEPT\n-A OUTPUT -p tcp -m tcp --sport 443 -m conntrack --ctstate ESTABLISHED -j ACCEPT\n-A OUTPUT -p tcp -m tcp --sport 8443 -m conntrack --ctstate ESTABLISHED -j ACCEPT\n-A OUTPUT -o lxcbr0 -p tcp -m tcp --sport 53 -j ACCEPT\n-A OUTPUT -o lxcbr0 -p udp -m udp --sport 53 -j ACCEPT\n-A OUTPUT -o lxcbr0 -p udp -m udp --sport 67 -j ACCEPT\n-A DOCKER-ISOLATION -j RETURN\n-A DOCKER-USER -j RETURN\n-A INPUT -s 212.123.123.123/32 -j REJECT\n-A fail2ban-ssh -j RETURN\nCOMMIT\n# Completed on Thu Jan 25 12:34:56 2018", 
            "title": "Raw"
        }, 
        {
            "location": "/#available-ports", 
            "text": "Fetch available ports within a range type.     Parameter  Type  Description  Default      type  string  Port range type  all     The following port ranges (400 ports) are externally available for forwarding.     Type  Range  Description      all  2200 - 8099  Returns all available ports    ssh  2200 - 2299  Returns available ssh ports    http  8000 - 8099  Returns available http ports    mysql  3300 - 3399  Returns available mysql ports    shellinabox  4200 - 4299  Returns available shellinabox ports     Call  $client- iptables- availablePorts( http );  Response  Array\n(\n    [0] =  8000\n    [1] =  8001\n    [2] =  8002\n    [3] =  8003\n    [4] =  8004\n    [5] =  8005\n    [6] =  8006\n    [7] =  8007\n    [8] =  8008\n    [9] =  8009\n    [10] =  8010\n    ... snip\n    [99] =  8099\n)", 
            "title": "Available Ports"
        }, 
        {
            "location": "/#check-port-in-use", 
            "text": "Check if a port is already in use by a rule.     Parameter  Type  Description  Default      port  int  Port to check  0     Call  $client- iptables- checkPortInUse(8000);  Response  boolean", 
            "title": "Check Port In Use"
        }, 
        {
            "location": "/#check-allowed-port", 
            "text": "Check if a port is in allowed ranges.     Parameter  Type  Description  Default      port  int  Port to check  0     Call  $client- iptables- checkAllowedPort(12345);  Response  boolean - false in the above case", 
            "title": "Check Allowed Port"
        }, 
        {
            "location": "/#add-forward", 
            "text": "Add new port forward rule.     Parameter  Type  Description  Default      data  array  Rule data      Call  $client- iptables- addForward([\n     label  =   Example ,\n     ip  =   10.158.250.5 ,\n     port  =  2252,\n     srv_type  =   SSH ,\n     srv_port  =  22,\n     enabled  =  1\n]);  Response  Array\n(\n    [status] =  success\n    [values] =  Array\n        (\n            [id] =  5\n            [type] =  forward\n            [name] =  d82025df-fc3f-4a2e-bbbd-dde6fddab4cb\n            [label] =  Example\n            [ip] =  10.158.250.5\n            [port] =  2252\n            [srv_type] =  ssh\n            [srv_port] =  22\n            [enabled] =  1\n            [added_date] =  2018-05-10 01:01:46\n            [has_change] =  1\n        )\n\n)", 
            "title": "Add Forward"
        }, 
        {
            "location": "/#update-forward", 
            "text": "Update port forward rule.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values     data  array  Updated rule data      Call  $client- iptables- updateForward( id = ? , [4], [\n     name  =   8610e47a-cf06-4806-964b-c5a3642954bb , // always use, to bypass port in use check\n     label  =   Example ,\n     ip  =   10.158.250.5 ,\n     port  =  2252,\n     srv_type  =   SSH ,\n     srv_port  =  22,\n     enabled  =  1\n]);  Response  Array\n(\n    [status] =  success\n    [values] =  Array\n        (\n            [id] =  4\n            [type] =  forward\n            [name] =  8610e47a-cf06-4806-964b-c5a3642954bb\n            [label] =  Example\n            [ip] =  10.158.250.5\n            [port] =  2252\n            [srv_type] =  SSH\n            [srv_port] =  22\n            [enabled] =  1\n            [added_date] =  2018-05-10 01:01:25\n            [has_change] =  1\n            [updated_date] =  2018-05-10 01:16:46\n            [range] =  \n            [note] =  \n            [bantime] =  \n        )\n\n)", 
            "title": "Update Forward"
        }, 
        {
            "location": "/#testing", 
            "text": "There are no tests setup for this component.", 
            "title": "Testing"
        }, 
        {
            "location": "/#contributing", 
            "text": "Please see  CONTRIBUTING  for details.", 
            "title": "Contributing"
        }, 
        {
            "location": "/#security", 
            "text": "If you discover any security related issues, please contact me via  https://cherone.co.uk  instead of using the issue tracker.", 
            "title": "Security"
        }, 
        {
            "location": "/#credits", 
            "text": "Lawrence Cherone  All Contributors", 
            "title": "Credits"
        }, 
        {
            "location": "/#development-encouragement", 
            "text": "If you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/#sponsors", 
            "text": "Get your company or name listed throughout the documentation and on each github repository, contact me at  https://cherone.co.uk  for further details.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.  See the  organisations page  for additional components.", 
            "title": "License"
        }
    ]
}