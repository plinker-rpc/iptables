{
    "docs": [
        {
            "location": "/", 
            "text": "PlinkerRPC PHP client/server makes it really easy to link and execute PHP \ncomponent classes on remote systems, while maintaining the feel of a local \nmethod call.\n\n\nWIP: control iptables though rpc\n\n\n::Installing::\n\n\nBring in the project with composer:\n\n\n{\n    \nrequire\n: {\n        \nplinker/iptables\n: \n=v0.1\n\n    }\n}\n\n\n\n\n\nThen navigate to \n./vendor/plinker/iptables/scripts\n and run \nbash install.sh\n\n\n::Client::\n\n\n/**\n\n\n * Plinker Config\n\n\n */\n\n\n$\nconfig\n \n=\n \n[\n\n\n    \n//\n \nplinker\n \nconnection\n\n\n    \nplinker\n \n=\n \n[\n\n\n        \nendpoint\n \n=\n \nhttp://127.0.0.1:88\n,\n\n\n        \npublic_key\n  \n=\n \nmakeSomethingUp\n,\n\n\n        \nprivate_key\n \n=\n \nagainMakeSomethingUp\n\n\n    \n]\n,\n\n\n\n    \n//\n \ndatabase\n \nconnection\n\n\n    \ndatabase\n \n=\n \n[\n\n\n        \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n\n        \nhost\n     \n=\n \n,\n\n\n        \nname\n     \n=\n \n,\n\n\n        \nusername\n \n=\n \n,\n\n\n        \npassword\n \n=\n \n,\n\n\n        \nfreeze\n   \n=\n \nfalse\n,\n\n\n        \ndebug\n    \n=\n \nfalse\n,\n\n\n    \n]\n\n\n];\n\n\n\n//\n \ninit\n \nplinker\n \nendpoint\n \nclient\n\n\n$\niptables\n \n=\n \nnew\n \n\\\nPlinker\n\\\nCore\n\\\nClient\n(\n\n\n    \n//\n \nwhere\n \nis\n \nthe\n \nplinker\n \nserver\n\n\n    \n$\nconfig\n[\nplinker\n][\nendpoint\n]\n,\n\n\n\n    \n//\n \ncomponent\n \nnamespace\n \nto\n \ninterface\n \nto\n\n\n    \nIptables\\Manager\n,\n\n\n\n    \n//\n \nkeys\n\n\n    \n$\nconfig\n[\nplinker\n][\npublic_key\n]\n,\n\n\n    \n$\nconfig\n[\nplinker\n][\nprivate_key\n]\n,\n\n\n\n    \n//\n \nconstruct\n \nvalues\n \nwhich\n \nyou\n \npass\n \nto\n \nthe\n \ncomponent\n,\n \nwhich\n \nthe\n \ncomponent\n\n\n    \n//\n  \nwill\n \nuse\n,\n \nfor\n \nRedbeanPHP\n \ncomponent\n \nyou\n \nwould\n \nsend\n \nthe\n \ndatabase\n \nconnection\n\n\n    \n//\n  \ndont\n \nworry\n \nits\n \nAES\n \nencrypted\n.\n \nsee\n:\n \nencryption\n-\nproof\n.\ntxt\n\n\n    \n$\nconfig\n\n\n)\n;\n\n\n\n\n\n\n::Calls::\n\n\nSetup\n\n\nApplies build tasks to plinker/tasks queue.\n\n\n$iptables-\nsetup([\n    \nbuild_sleep\n =\n 5,\n    // LXD settings *required\n    \nlxd\n =\n [\n        \nbridge\n =\n \nlxdbr0\n,\n        \nip\n =\n \n10.158.250.0/24\n\n    ],\n    // Docker settings *optional\n    \ndocker\n =\n [\n        \nbridge\n =\n \ndocker0\n,\n        \nip\n =\n \n172.17.0.0/16\n\n    ]\n]);\n\n\n\n\n\nCreate\n\n\n$route = [\n    \nlabel\n =\n \nExample\n,\n    \ndomains\n =\n [\n        \nexample.com\n,\n        \nwww.example.com\n\n    ],\n    \nupstreams\n =\n [\n        [\nip\n =\n \n127.0.0.1\n, \nport\n =\n \n80\n]\n    ],\n    \nletsencrypt\n =\n 0,\n    \nenabled\n =\n 1\n];\n$iptables-\nadd($route);\n\n\n\n\n\nUpdate\n\n\n$route = [\n    \nlabel\n =\n \nExample Changed\n,\n    \ndomains\n =\n [\n        \nexample.com\n,\n        \nwww.example.com\n,\n        \nnew.example.com\n,\n    ],\n    \nupstreams\n =\n [\n        [\nip\n =\n 10.0.0.1\n, \nport\n =\n \n8080\n]\n    ],\n    \nletsencrypt\n =\n 0,\n    \nenabled\n =\n 1\n];\n// column, value, $data\n$iptables-\nupdate(\nid = ?\n, [1], $route);\n\n\n\n\n\nFetch\n\n\n$iptables-\nfetch(\nroute\n);\n$iptables-\nfetch(\nroute\n, \nid = ?\n, [1]);\n$iptables-\nfetch(\nroute\n, \nname = ?\n, [\nsome-guidV4-value\n])\n\n\n\n\n\nRemove\n\n\n$iptables-\nremove(\nname = ?\n, [$route[\nname\n]]);\n\n\n\n\n\nRebuild\n\n\n$iptables-\nrebuild(\nname = ?\n, [$route[\nname\n]]);\n\n\n\n\n\nReset\n\n\n// dont remove tasks\n$iptables-\nreset();\n\n// remove tasks\n$iptables-\nreset(true);\n\n\n\n\n\nSee the \norganisations page\n for additional \ncomponents and examples.", 
            "title": "Home"
        }, 
        {
            "location": "/#installing", 
            "text": "Bring in the project with composer:  {\n     require : {\n         plinker/iptables :  =v0.1 \n    }\n}  Then navigate to  ./vendor/plinker/iptables/scripts  and run  bash install.sh", 
            "title": "::Installing::"
        }, 
        {
            "location": "/#client", 
            "text": "/**   * Plinker Config   */  $ config   =   [       //   plinker   connection       plinker   =   [           endpoint   =   http://127.0.0.1:88 ,           public_key    =   makeSomethingUp ,           private_key   =   againMakeSomethingUp       ] ,       //   database   connection       database   =   [           dsn        =   sqlite:./.plinker/database.db ,           host       =   ,           name       =   ,           username   =   ,           password   =   ,           freeze     =   false ,           debug      =   false ,       ]  ];  //   init   plinker   endpoint   client  $ iptables   =   new   \\ Plinker \\ Core \\ Client (       //   where   is   the   plinker   server       $ config [ plinker ][ endpoint ] ,       //   component   namespace   to   interface   to       Iptables\\Manager ,       //   keys       $ config [ plinker ][ public_key ] ,       $ config [ plinker ][ private_key ] ,       //   construct   values   which   you   pass   to   the   component ,   which   the   component       //    will   use ,   for   RedbeanPHP   component   you   would   send   the   database   connection       //    dont   worry   its   AES   encrypted .   see :   encryption - proof . txt       $ config  ) ;", 
            "title": "::Client::"
        }, 
        {
            "location": "/#calls", 
            "text": "Setup  Applies build tasks to plinker/tasks queue.  $iptables- setup([\n     build_sleep  =  5,\n    // LXD settings *required\n     lxd  =  [\n         bridge  =   lxdbr0 ,\n         ip  =   10.158.250.0/24 \n    ],\n    // Docker settings *optional\n     docker  =  [\n         bridge  =   docker0 ,\n         ip  =   172.17.0.0/16 \n    ]\n]);  Create  $route = [\n     label  =   Example ,\n     domains  =  [\n         example.com ,\n         www.example.com \n    ],\n     upstreams  =  [\n        [ ip  =   127.0.0.1 ,  port  =   80 ]\n    ],\n     letsencrypt  =  0,\n     enabled  =  1\n];\n$iptables- add($route);  Update  $route = [\n     label  =   Example Changed ,\n     domains  =  [\n         example.com ,\n         www.example.com ,\n         new.example.com ,\n    ],\n     upstreams  =  [\n        [ ip  =  10.0.0.1 ,  port  =   8080 ]\n    ],\n     letsencrypt  =  0,\n     enabled  =  1\n];\n// column, value, $data\n$iptables- update( id = ? , [1], $route);  Fetch  $iptables- fetch( route );\n$iptables- fetch( route ,  id = ? , [1]);\n$iptables- fetch( route ,  name = ? , [ some-guidV4-value ])  Remove  $iptables- remove( name = ? , [$route[ name ]]);  Rebuild  $iptables- rebuild( name = ? , [$route[ name ]]);  Reset  // dont remove tasks\n$iptables- reset();\n\n// remove tasks\n$iptables- reset(true);  See the  organisations page  for additional \ncomponents and examples.", 
            "title": "::Calls::"
        }
    ]
}